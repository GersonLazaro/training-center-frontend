{"version":3,"sources":["app.js","environment.js","main.js","config/api.js","config/config.js","config/messages.js","models/models.js","models/user-login.js","models/user-reset.js","models/user-signin.js","resources/index.js","services/alert.js","services/auth.js","services/http.js","services/jwt.js","services/services.js","modules/error-404/error-404.js","modules/home/home.js","modules/login/login.js","modules/recovery/recovery-password.js","modules/recovery/reset-password.js","modules/signin/signin.js","resources/elements/loading-indicator.js"],"names":["App","inject","httpService","configureRouter","config","router","title","addPipelineStep","AuthorizeStep","map","name","route","moduleId","layoutView","settings","roles","authService","run","navigationInstruction","next","getAllInstructions","some","i","indexOf","isAdmin","isCoach","isStudent","isVisitor","cancel","debug","testing","configure","Promise","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","plugin","timeout","developmentLogging","start","then","setRoot","API","apiUrl","endponts","auth","users","recovery","reset","tokenName","MESSAGES","loginWrongData","text","type","loginIncompleteData","signInCorrect","signInWrongData","signInIncompleteData","signInDifferentPasswords","recoveryEmailSent","recoveryMailDoesNotExist","recoveryInvalidToken","recoveryExpiredToken","recoveryDifferentPasswords","recoveryCorrect","serverError","unknownError","permissionsError","UserLogIn","email","password","UserReset","confirmPassword","token","UserSignIn","username","code","isValid","globalResources","Alert","notificationService","showMessage","message","info","danger","success","warning","Auth","jwtService","user","httpClient","fetch","method","body","JSON","stringify","checkStatus","parseJSON","registerStudent","requestRecovery","validateReset","resetPassword","login","save","logout","remove","isAuthenticated","tokenExists","getUserType","validateResetToken","startDate","endDate","parse","window","atob","split","iat","exp","e","undefined","Error","actualDate","Date","getTime","Http","withBaseUrl","response","status","error","statusText","json","Jwt","localStorage","getItem","data","setItem","removeItem","getUsername","getUserId","sub","usertype","Error404","aa","Home","cambiar","Login","alertService","authorizationService","navigate","catch","RecoveryPassword","console","log","ResetPassword","tokenValid","activate","params","routeConfig","requestResetPassword","Signin","signin","nprogress","LoadingIndicator","defaultValue","on","loadingChanged","newValue","done"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import { Redirect } from 'aurelia-router'\nimport { Auth, Http } from 'services/services'\n\n/**\n * App (Main Module)\n * Módulo central de la aplicación\n * @export\n * @class App\n */\nexport class App {\n  /**\n   * Método que realiza inyección de las dependencias necesarias en el módulo.\n   * Estas dependencias son cargadas bajo el patrón de diseño singleton.\n   * @static\n   * @returns Array con las dependencias a inyectar: Servicio de conexión http (Http)\n   */\n  static inject () {\n    return [Http]\n  }\n  /**\n   * Crea una instancia de App.\n   * @param {service} httpService - Servicio de conexión http\n   */\n  constructor (httpService) {\n    this.httpService = httpService\n  }\n  /**\n   * Se encarga del enrutamiento dentro de la aplicación\n   * @param {any} config - Configuración de la aplicación\n   * @param {any} router - Enrutador principal de la aplicación\n   */\n  configureRouter (config, router) {\n    config.title = 'UFPS Training Center'\n    config.addPipelineStep('authorize', AuthorizeStep)\n    config.map([\n      // Login\n      {\n        name: 'login',\n        route: 'iniciar-sesion',\n        moduleId: './modules/login/login',\n        title: 'Iniciar Sesión',\n        layoutView: './layouts/not-logged.html',\n        settings: {\n          roles: ['visitor']\n        }\n      },\n      // Signin\n      {\n        name: 'signin',\n        route: 'registro',\n        moduleId: './modules/signin/signin',\n        title: 'Regístrate',\n        layoutView: './layouts/not-logged.html',\n        settings: {\n          roles: ['visitor']\n        }\n      },\n      // Recovery Password\n      {\n        name: 'recovery-password',\n        route: 'recuperar-password',\n        moduleId: './modules/recovery/recovery-password',\n        title: 'Recuperar Contraseña',\n        layoutView: './layouts/not-logged.html',\n        settings: {\n          roles: ['visitor']\n        }\n      },\n      // Reset Password\n      {\n        name: 'reset-password',\n        route: 'cambiar-password/:token',\n        moduleId: './modules/recovery/reset-password',\n        title: 'Recuperar Contraseña',\n        layoutView: './layouts/not-logged.html',\n        settings: {\n          roles: ['visitor']\n        }\n      },\n      // Home\n      {\n        name: 'home',\n        route: '',\n        moduleId: './modules/home/home',\n        settings: {\n          roles: ['admin', 'coach', 'student']\n        }\n      }\n    ])\n    this.router = router\n  }\n}\n\n/**\n * AuthorizeStep\n * Clase encargada de verificar si un usuario tiene permisos para acceder a una ruta\n * @class AuthorizeStep\n */\nclass AuthorizeStep {\n  /**\n   * Método que realiza inyección de las dependencias necesarias en el módulo.\n   * Estas dependencias son cargadas bajo el patrón de diseño singleton.\n   * @static\n   * @returns Array con las dependencias a inyectar: Servicio de autenticación (Auth)\n   */\n  static inject () {\n    return [Auth]\n  }\n\n  /**\n   * Crea una instancia de AuthorizeStep.\n   * @param {service} authService - Servicio de autenticación\n   */\n  constructor (authService) {\n    this.authService = authService\n  }\n\n  /**\n   * Verifica si la instrucción de navegación puede ser ejecutada (es decir, si el usuario tiene permisos)\n   * Y la ejecuta. De no tener permisos, redirige a una nueva ruta.\n   * @param {any} navigationInstruction - Instrucción de navegación recibida\n   * @param {any} next - Enrutamento\n   */\n  run (navigationInstruction, next) {\n    if (navigationInstruction.getAllInstructions().some(i => i.config.settings.roles.indexOf('admin') !== -1) && this.authService.isAdmin()) {\n      return next()\n    }\n    if (navigationInstruction.getAllInstructions().some(i => i.config.settings.roles.indexOf('coach') !== -1) && this.authService.isCoach()) {\n      return next()\n    }\n    if (navigationInstruction.getAllInstructions().some(i => i.config.settings.roles.indexOf('student') !== -1) && this.authService.isStudent()) {\n      return next()\n    }\n    if (navigationInstruction.getAllInstructions().some(i => i.config.settings.roles.indexOf('visitor') !== -1)) {\n      if (!this.authService.isVisitor()) {\n        return next.cancel(new Redirect(''))\n      } else {\n        return next()\n      }\n    }\n    if (this.authService.isVisitor()) {\n      return next.cancel(new Redirect('iniciar-sesion'))\n    } else {\n      return next.cancel(new Redirect(''))\n    }\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment'\nimport 'fetch'\n\n// Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n})\n\n/**\n * Configura el framework aurelia para inicializar la aplicación\n * @export\n * @param {any} aurelia - Core del framework\n */\nexport function configure (aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources')\n    .plugin('aurelia-notify', settings => {\n      settings.timeout = 7000\n    })\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging()\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing')\n  }\n\n  aurelia.start().then(() => aurelia.setRoot())\n}\n","/**\n * API\n * Archivo con todos los datos para la conexión al backend\n * @exports API - Objeto JSON con datos de conexión a Backend\n */\nexport let API = {\n  // API\n  apiUrl: 'http://demo9817161.mockable.io/',\n  endponts: {\n    auth: 'auth',\n    users: 'users',\n    recovery: 'recovery',\n    reset: 'reset'\n  },\n\n  // SESSION\n  tokenName: 'Authorization'\n}\n","/**\n * Archivo para centralizar las configuraciones.\n * Cuando se desee importar cualquier archivo de configuración, puede hacerlo\n * a través de este archivo: from 'config/config'\n * @exports API (Objeto JSON) - Configuraciones de conexión al backend\n * @exports MESSAGES (Objeto JSON) - Mensajes de alerta, error, éxito y peligro de la app.\n */\nexport * from './api'\nexport * from './messages'\n","/**\n * MESSAGES\n * Archivo con todos los mensajes de alerta, exito, error o peligro que se muestran en la aplicación.\n * IMPORTANTE: Cualquier nuevo mensaje que se desee agregar debe incluirse a través de este archivo.\n * @exports MESSAGES - Objeto JSON con todos los mensajes\n */\nexport let MESSAGES = {\n  // LOGIN\n  loginWrongData: {\n    text: 'Sus datos no coinciden. Inténtalo de nuevo',\n    type: 'error'\n  },\n  loginIncompleteData: {\n    text: 'Ingrese un usuario y contraseña para iniciar sesión',\n    type: 'warning'\n  },\n\n  // SIGNIN\n  signInCorrect: {\n    text: 'Su cuenta se ha creado exitosamente.',\n    type: 'success'\n  },\n  signInWrongData: {\n    text: 'Hay un error con sus datos. Verifícalos y vuelve a intentarlo',\n    type: 'error'\n  },\n  signInIncompleteData: {\n    text: 'Hay campos obligatorios sin llenar. Complétalos para registrar correctamente',\n    type: 'warning'\n  },\n  signInDifferentPasswords: {\n    text: 'Las contraseñas no coinciden',\n    type: 'warning'\n  },\n\n  // RECOVERY\n  recoveryEmailSent: {\n    text: 'Se ha enviado un mensaje a su correo para proceder a la recuperación de su contraseña',\n    type: 'success'\n  },\n  recoveryMailDoesNotExist: {\n    text: 'Este email no ha sido registrado en la plataforma',\n    type: 'error'\n  },\n  recoveryInvalidToken: {\n    text: 'Link invalido. Verifique el enlace enviado a su correo, e inténtelo de nuevo',\n    type: 'error'\n  },\n  recoveryExpiredToken: {\n    text: 'Su link de recuperación se ha vencido. Solicite un nuevo link para recuperar su contraseña, y uselo en máximo una hora',\n    type: 'error'\n  },\n  recoveryDifferentPasswords: {\n    text: 'Las contraseñas no coinciden',\n    type: 'warning'\n  },\n  recoveryCorrect: {\n    text: 'Su contraseña se ha cambiado exitosamente',\n    type: 'success'\n  },\n  // GENERAL\n  serverError: {\n    text: 'Ha ocurrido un error interno. Lo sentimos. Vuelve a intentarlo mas tarde',\n    type: 'error'\n  },\n  unknownError: {\n    text: 'Lo sentimos. Ha ocurrido un error',\n    type: 'error'\n  },\n  permissionsError: {\n    text: 'Usted no tiene permisos para realizar esta acción',\n    type: 'error'\n  }\n}\n","/**\n * Archivo para centralizar los modelos.\n * Cuando se desee importar cualquier modelo, puede hacerlo\n * a través de este archivo: from 'models/models'\n * @exports UserLogIn (Class) - Modelo de usuario para el inicio de sesión\n * @exports UserReset (Class) - Modelo de usuario para el cambio de contraseña\n * @exports UserSignIn (Class) - Modelo de usuario para el registro\n */\nexport * from './user-login'\nexport * from './user-reset'\nexport * from './user-signin'\n","/**\n * UserLogin\n * Modelo de usuario para el inicio de sesión\n * @export\n * @class UserLogIn\n */\nexport class UserLogIn {\n  /**\n   * Crea una instancia de UserLogIn.\n   * @param {string} [email=null] - Email del usuario que inicia sesión\n   * @param {string} [password=null] - Contraseña del usuario que inicia sesión\n   */\n  constructor (email = null, password = null) {\n    this.email = email\n    this.password = password\n  }\n}\n","\n/**\n * UserReset\n * Modelo de usuario para el cambio de contraseña\n * @export\n * @class UserReset\n */\nexport class UserReset {\n\n  /**\n   * Crea una instancia de UserReset.\n   * @param {string} [email=null] - Email del usuario que solicita el cambio de contraseña\n   * @param {string} [password=null] - Nueva contraseña\n   * @param {string} [confirmPassword=null] - Verificación de la nueva contraseña\n   * @param {string} [token=null] - Token para validar que el usuario realmente ha solicitado el cambio.\n   */\n  constructor (email = null, password = null, confirmPassword = null, token = null) {\n    this.email = email\n    this.password = password\n    this.confirmPassword = confirmPassword\n    this.token = token\n  }\n}\n","\n/**\n * UserSignIn\n * Modelo de usuario para el registro en la aplicación\n * @export\n * @class UserSignIn\n */\nexport class UserSignIn {\n  /**\n   * Crea una instancia del tipo usuario, al registrarse.\n   * @param {string} [email=null] - Correo electrónico del nuevo usuario\n   * @param {string} [password=null] - Contraseña del nuevo usuario\n   * @param {string} [confirmPassword=null] - Verificación de contraseña\n   * @param {string} [name=null] - Nombre del usuario\n   * @param {string} [username=null] - Username del usuario\n   * @param {number} [code=null] - Código del usuario\n   * @param {number} [type=null] - Tipo de usuario (0 => estudiante, 1=> coach, 2=> admin)\n   */\n  constructor (email = null, password = null, confirmPassword = null, name = null, username = null, code = null, type = null) {\n    this.email = email\n    this.password = password\n    this.confirmPassword = confirmPassword\n    this.name = name\n    this.username = username\n    this.code = code\n    this.type = type\n  }\n\n  /**\n   * Valida que el usuario sea valido (solo el código puede ser nulo)\n   * @return {boolean} true si el usuario es valido, falso si no\n   */\n  isValid () {\n    if (this.email === '' || this.email == null) {\n      return false\n    }\n    if (this.password === '' || this.password == null) {\n      return false\n    }\n    if (this.confirmPassword === '' || this.confirmPassword == null) {\n      return false\n    }\n    if (this.name === '' || this.name == null) {\n      return false\n    }\n    if (this.username === '' || this.username == null) {\n      return false\n    }\n    if (this.type === '' || this.type == null) {\n      return false\n    }\n    return true\n  }\n}\n","export function configure (config) {\n  config.globalResources(['./elements/loading-indicator'])\n}\n","import { NotificationService } from 'aurelia-notify'\n\n/**\n * Alert (Service)\n * Servicio que muestra notificaciones en pantalla\n * @export\n * @class Alert\n */\nexport class Alert {\n  /**\n   * Método que realiza inyección de las dependencias necesarias en el servicio.\n   * Estas dependencias son cargadas bajo el patrón de diseño singleton.\n   * @static\n   * @returns Array con las dependencias a inyectar: Servicio externo de notificaciones (NotificationService)\n   */\n  static inject () {\n    return [NotificationService]\n  }\n\n  /**\n   * Crea una instancia de Alert.\n   * @param {service} notificationService - Servicio externo de notificaciones\n   */\n  constructor (notificationService) {\n    this.notificationService = notificationService\n  }\n\n  /**\n   * Muestra un mensaje en pantalla\n   * @param {JSON} message - El mensaje a mostrar debe contener dos campos: type, que indica\n   * el tipo de mensaje (info, error, warning o success), y text, con el texto del mensaje\n   */\n  showMessage (message) {\n    if (message.type === 'info') {\n      this.notificationService.info(message.text)\n    } else if (message.type === 'error') {\n      this.notificationService.danger(message.text)\n    } else if (message.type === 'success') {\n      this.notificationService.success(message.text)\n    } else if (message.type === 'warning') {\n      this.notificationService.warning(message.text)\n    }\n  }\n}\n","import { API } from 'config/config'\nimport { Http } from 'services/http'\nimport { Jwt } from 'services/jwt'\n\n/**\n * Auth (Service)\n * Servicio de autenticación y registro\n * @export\n * @class Auth\n */\nexport class Auth {\n\n  /**\n   * Método que realiza inyección de las dependencias necesarias en el servicio.\n   * Estas dependencias son cargadas bajo el patrón de diseño singleton.\n   * @static\n   * @returns Array con las dependencias a inyectar: Servicio de conexión Http (Http),\n   * servicio de manejo de Json Web Tokens (Jwt)\n   */\n  static inject () {\n    return [Http, Jwt]\n  }\n\n  /**\n   * Crea una instancia de Auth.\n   * @param {service} httpService - Servicio para conexiones http\n   * @param {service} jwtService - Servicio para manejo de Json Web Tokens (jwt)\n   */\n  constructor (httpService, jwtService) {\n    this.httpService = httpService\n    this.jwtService = jwtService\n  }\n  /**\n   * Envia al servidor los datos de inicio de sesión, y retorna el token de usuario si el login\n   * es válido.\n   * @param {UserLogIn} user - Usuario del tipo userLogin con email y password\n   * @returns - Promise con el token de usuario\n   */\n  auth (user) {\n    return this.httpService.httpClient\n      .fetch(API.endponts.auth, {\n        method: 'post',\n        body: JSON.stringify(user)\n      })\n      .then(this.httpService.checkStatus)\n      .then(this.httpService.parseJSON)\n  }\n\n  /**\n   * Envia un estudiante para ser registrado en la plataforma\n   * @param {UserSignIn} user - Datos del usuario a ser registrado en la plataforma\n   * @returns Promise sin body, donde el status code indica el resultado de la operación\n   */\n  registerStudent (user) {\n    return this.httpService.httpClient\n      .fetch(API.endponts.users, {\n        method: 'post',\n        body: JSON.stringify(user)\n      })\n      .then(this.httpService.checkStatus)\n      .then(this.httpService.parseJSON)\n  }\n\n  /**\n   * Envia un correo para solicitar un cambio de contraseña. Si el correo está registrado\n   * Se enviará un mensaje a esa dirección para proceder con el cambio.\n   * @param {string} email - Correo que solicita el cambio\n   * @returns Promise sin body, donde el status code indica el resultado de la operación\n   */\n  requestRecovery (email) {\n    return this.httpService.httpClient\n      .fetch(API.endponts.recovery, {\n        method: 'get',\n        body: {email: email}\n      })\n      .then(this.httpService.checkStatus)\n      .then(this.httpService.parseJSON)\n  }\n\n  /**\n   * Verifica que el token de cambio de contraseña es valido.\n   * @param {string} token - token enviado por email\n   * @returns Promise con cuerpo {email: email} en caso de ser exitoso.\n   */\n  validateReset (token) {\n    return this.httpService.httpClient\n      .fetch(API.endponts.reset, {\n        method: 'post',\n        body: {token: token}\n      })\n      .then(this.httpService.checkStatus)\n      .then(this.httpService.parseJSON)\n  }\n\n  /**\n   * Envía los datos de un usuario para reestablecer su contraseña\n   * @param {userReset} user - Usuario cuya contraseña será reestablecida\n   * @returns Promise sin body, donde el status code indica el resultado de la operación\n   */\n  resetPassword (user) {\n    return this.httpService.httpClient\n      .fetch(API.endponts.reset, {\n        method: 'PATCH',\n        body: JSON.stringify(user)\n      })\n      .then(this.httpService.checkStatus)\n      .then(this.httpService.parseJSON)\n  }\n\n  /**\n   * Inicia sesión guardando el token en el almacenamiento local del usuario.\n   * @param {string} token - Token para almacenar\n   */\n  login (token) {\n    this.jwtService.save(token)\n  }\n\n  /**\n   * Cierra una sesión de usuario en la plataforma.\n   */\n  logout () {\n    this.jwtService.remove()\n  }\n\n  /**\n   * Informa si el usuario se encuentra actualmente autenticado (tiene una sesión activa)\n   * @returns boolean - true si está autenticado, false en caso contrario\n   */\n  isAuthenticated () {\n    return this.jwtService.tokenExists()\n  }\n\n  /**\n   * Informa si el usuario es un estudiante.\n   * @returns boolean - true si es estudiante, false en caso contrario\n   */\n  isStudent () {\n    return this.jwtService.getUserType() === 'student'\n  }\n\n  /**\n   * Informa si el usuario es un coach.\n   * @returns boolean - true si es coach, false en caso contrario\n   */\n  isCoach () {\n    return this.jwtService.getUserType() === 'coach'\n  }\n\n  /**\n   * Informa si el usuario es un administrador.\n   * @returns boolean - true si es administrador, false en caso contrario\n   */\n  isAdmin () {\n    return this.jwtService.getUserType() === 'admin'\n  }\n\n  /**\n   * Informa si el usuario es un visitante (no autenticado).\n   * @returns boolean - true si es visitante, false en caso contrario\n   */\n  isVisitor () {\n    return this.jwtService.getUserType() === 'visitor'\n  }\n\n  /**\n   * Recibe el token de recuperación de contraseña, verifica que sea valido\n   * y retorna el email contenido en el token.\n   * @param {string} token - token recibido\n   * @returns {string}  email de usuario\n   * @throws {error} invalid token - Token falso o erroneo\n   * @throws {error} expired token - Token vencido\n   */\n  validateResetToken (token) {\n    let info\n    let startDate\n    let endDate\n    try {\n      info = JSON.parse(window.atob(token.split('.')[1]))\n      startDate = info.iat\n      endDate = info.exp\n    } catch (e) {\n      info = null\n    }\n    if (info == null || startDate === undefined || endDate === undefined) {\n      throw new Error('invalid token')\n    }\n    let actualDate = new Date().getTime()\n    if (actualDate < startDate) {\n      throw new Error('invalid token')\n    } else if (actualDate + 1000 >= endDate) {\n      throw new Error('expired token')\n    } else {\n      return info.email\n    }\n  }\n}\n","import { HttpClient } from 'aurelia-fetch-client'\nimport { API } from 'config/api'\nimport 'fetch'\n\n/**\n * Http (Service)\n * Servicio encargado de las conexiones http utilizando el estandar Fetch\n * @export\n * @class Http\n */\nexport class Http {\n\n  /**\n   * Crea una instancia de Http, y configura el cliente de conexión.\n   */\n  constructor () {\n    this.httpClient = new HttpClient()\n    this.httpClient.configure(config => {\n      config\n        .withBaseUrl(API.apiUrl)\n    })\n  }\n\n  /**\n   * Verifica el status code de las respuestas recibidas en las conexiones, y dispara\n   * un error en casos de status code erroneos. Importante: Los errores deben ser capturados\n   * con un catch\n   * @param {response} response - Respuesta recibida, generalmente en JSON\n   * @returns cuerpo de la respuesta\n   * @throws errores en la comunicación que retornen codigos diferentes a 2xx\n   */\n  checkStatus (response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response\n    } else {\n      var error = new Error(response.statusText)\n      error.response = response\n      throw error\n    }\n  }\n\n  /**\n   * Parsea la respuesta a formato json\n   * @param {response} response - Respuesta a la petición\n   * @returns JSON - Objeto JSON con la respuesta recibida\n   */\n  parseJSON (response) {\n    return response.json()\n  }\n\n}\n","import { API } from 'config/config'\n\n/**\n * Jwt (service)\n * Servicio para el manejo de tokens del tipo JSON Web Token (jwt)\n * @export\n * @class Jwt\n */\nexport class Jwt {\n  /**\n   * Crea una instancia de Jwt.\n   */\n  constructor () {\n    this.token = window.localStorage.getItem(API.tokenName)\n    if (this.tokenExists()) {\n      this.data = JSON.parse(window.atob(this.token.split('.')[1]))\n    } else {\n      this.data = null\n    }\n  }\n\n  /**\n   * Guarda un nuevo token en el almacenamiento local del usuario.\n   * @param {string} token - Token a almacenar\n   */\n  save (token) {\n    window.localStorage.setItem(API.tokenName, token)\n    this.token = window.localStorage.getItem(API.tokenName)\n    this.data = JSON.parse(window.atob(this.token.split('.')[1]))\n  }\n\n  /**\n   * Elimina un token del almacenamiento local del usuario.\n   */\n  remove () {\n    window.localStorage.removeItem(API.tokenName)\n    this.token = null\n    this.data = null\n  }\n\n  /**\n   * Verifica si existe un token almacenado.\n   * @returns boolean - true si existe un token, false en caso contrario\n   */\n  tokenExists () {\n    return window.localStorage.getItem(API.tokenName) !== null\n  }\n\n  /**\n   * Obtiene el nombre de usuario almacenado en el token\n   * @returns string - nombre de usuario\n   */\n  getUsername () {\n    if (!this.tokenExists) {\n      return null\n    } else {\n      return this.data.username\n    }\n  }\n\n  /**\n   * Obtiene el id de usuario almacenado en el token\n   * @returns number - Id del usuario\n   */\n  getUserId () {\n    if (!this.tokenExists) {\n      return null\n    } else {\n      return this.data.sub\n    }\n  }\n\n  /**\n   * Obtiene el tipo de usuario almacenado en el token\n   * @returns string - visitor, student, coach o admin según corresponda\n   */\n  getUserType () {\n    if (!this.tokenExists()) {\n      return 'visitor'\n    } else {\n      let type = this.data.usertype\n      switch (type) {\n        case '0':\n          return 'student'\n        case '1':\n          return 'coach'\n        case '2':\n          return 'admin'\n      }\n      return 'visitor'\n    }\n  }\n\n}\n","/**\n * Archivo para centralizar los servicios.\n * Cuando se desee importar cualquier servicio, puede hacerlo\n * a través de este archivo: from 'services/services'\n * @exports Alert (Service) - Servicio de notificaciones\n * @exports Auth (Service) - Servicio de autenticación y validación\n * @exports Http (Service) - Servicio de conexión http\n * @exports jwt (Service) - Servicio de manejode JSON Web Token (JWT)\n */\nexport * from './alert'\nexport * from './auth'\nexport * from './http'\nexport * from './jwt'\n","export class Error404 {\n\n}\n","\nexport class Home {\n  constructor () {\n    this.email = 'test'\n  }\n  cambiar () {\n    this.email = 'otro'\n    return 'algo'\n  }\n}\n\nexport function aa () {\n  return 'gbcf'\n}","import { Router } from 'aurelia-router'\n\nimport { MESSAGES } from 'config/config'\nimport { UserLogIn } from 'models/models'\nimport { Alert, Auth } from 'services/services'\n\n/**\n * Login (Module)\n * Módulo de la aplicación para realizar el inicio de sesión\n * Accesible vía /#/iniciar-sesion/\n * @export\n * @class Login\n */\nexport class Login {\n  /**\n   * Método que realiza inyección de las dependencias necesarias en el módulo.\n   * Estas dependencias son cargadas bajo el patrón de diseño singleton.\n   * @static\n   * @returns Array con las dependencias a inyectar: Servicio de notificaciones (Alert),\n   * Servicio de autenticación (Auth), y enrutamiento (Router)\n   */\n  static inject () {\n    return [Alert, Auth, Router]\n  }\n  /**\n   * Crea una instancia de Login.\n   * @param {service} alertService - Servicio de notificaciones en pantalla\n   * @param {service} authorizationService - Servicio de autenticación y registro\n   * @param {service} router - Servicio de enrutamiento\n   */\n  constructor (alertService, authorizationService, router) {\n    this.authorizationService = authorizationService\n    this.router = router\n    this.alertService = alertService\n    this.user = new UserLogIn()\n  }\n  /**\n   * Valida los datos e intenta iniciar sesión\n   */\n  login () {\n    if (this.user.email !== '' && this.user.password !== '' && this.user.email != null && this.user.password !== null) {\n      this.authorizationService.auth(this.user)\n      .then((data) => {\n        this.authorizationService.login(data.token)\n        this.router.navigate('')\n      }) // Si el inicio es valido, guarda el token y redirige al inicio\n      .catch(error => {\n        switch (error.status) {\n          case 401:\n            this.alertService.showMessage(MESSAGES.loginWrongData)\n            this.user = new UserLogIn()\n            break\n          case 500:\n            this.alertService.showMessage(MESSAGES.serverError)\n            break\n          default:\n            this.alertService.showMessage(MESSAGES.unknownError)\n        }\n      })\n    } else {\n      this.alertService.showMessage(MESSAGES.loginIncompleteData)\n    }\n  }\n}\n","import { MESSAGES } from 'config/config'\nimport { Alert, Auth } from 'services/services'\n\n/**\n * RecoveryPassword (Module)\n * Módulo para la recuperación de contraseña.\n * Accesible via /#/recuperar-password/\n * @export\n * @class RecoveryPassword\n */\nexport class RecoveryPassword {\n  /**\n   * Método que realiza inyección de las dependencias necesarias en el módulo.\n   * Estas dependencias son cargadas bajo el patrón de diseño singleton.\n   * @static\n   * @returns Array con las dependencias a inyectar: Servicio de notificaciones (Alert),\n   * Servicio de Autenticación (Auth)\n   */\n  static inject () {\n    return [Alert, Auth]\n  }\n  /**\n   * Crea una instancia de RecoveryPassword.\n   * @param {service} alertService - Servicio de notificaciones y mensajes\n   * @param {service} authService - Servicio de autenticación y registro\n   */\n  constructor (alertService, authService) {\n    this.alertService = alertService\n    this.authService = authService\n    this.email = ''\n  }\n\n  /**\n   * Solicita al backend un cambio de contraseña para el correo dado.\n   * De ser valido, el backend enviará un email para proceder con el cambio.\n   */\n  requestRecovery () {\n    if (this.email !== '') {\n      this.authService.requestRecovery(this.email)\n        .then(() => {\n          this.alertService.showMessage(MESSAGES.recoveryEmailSent)\n        })\n        .catch(error => {\n          console.log(error)\n          switch (error.status) {\n            case 400:\n              this.alertService.showMessage(MESSAGES.recoveryMailDoesNotExist)\n              break\n            case 500:\n              this.alertService.showMessage(MESSAGES.serverError)\n              break\n            default:\n              this.alertService.showMessage(MESSAGES.unknownError)\n          }\n        })\n    }\n  }\n}\n","import { Router } from 'aurelia-router'\n\nimport { MESSAGES } from 'config/config'\nimport { UserReset } from 'models/models'\nimport { Alert, Auth } from 'services/services'\n\n/**\n * ResetPassword (Module)\n * Módulo para el cambio de la contraseña, una vez se ha solicitado su recuperación.\n * @export\n * @class ResetPassword\n */\nexport class ResetPassword {\n  /**\n   * Método que realiza inyección de las dependencias necesarias en el módulo.\n   * Estas dependencias son cargadas bajo el patrón de diseño singleton.\n   * @static\n   * @returns Array con las dependencias a inyectar: Servicio de notificaciones (Alert),\n   * Servicio de Autenticación (Auth), Enrutamiento (Router)\n   */\n  static inject () {\n    return [Alert, Auth, Router]\n  }\n  /**\n   * Crea una instancia de ResetPassword.\n   * @param {service} alertService - Servicio de notificaciones y mensajes\n   * @param {service} authService - Servicio de autenticación y registro\n   * @param {service} router - Servicio de enrutamiento\n   */\n  constructor (alertService, authorizationService, router) {\n    this.alertService = alertService\n    this.authorizationService = authorizationService\n    this.router = router\n    this.user = new UserReset()\n    this.tokenValid = false\n  }\n\n  /**\n   * activate() es un método especial que se invoca justo antes que el enrutador active el componente.\n   * En este caso, activate valida el token recibido y redirige al inicio de sesión si el token no es valido.\n   * @param {any} params - Parametros del enrutamiento, entre ellos el token\n   * @param {any} routeConfig - Configurción del enrutamiento\n   */\n  activate (params, routeConfig) {\n    this.routeConfig = routeConfig\n    this.user.token = params.token\n    try {\n      this.user.email = this.authorizationService.validateResetToken(this.user.token)\n      this.tokenValid = true\n    } catch (error) {\n      if (error.message === 'invalid token') {\n        this.alertService.showMessage(MESSAGES.recoveryInvalidToken)\n      } else if (error.message === 'expired token') {\n        this.alertService.showMessage(MESSAGES.recoveryExpiredToken)\n      }\n      this.router.navigate('recuperar-password')\n    }\n  }\n\n  /**\n   * Envia al servidor los datos para establecer una nueva contraseña\n   */\n  requestResetPassword () {\n    if (this.user.password !== '' && this.user.confirmPassword === this.user.password) {\n      this.authorizationService.resetPassword(this.user)\n        .then(() => {\n          this.alertService.showMessage(MESSAGES.recoveryCorrect)\n          this.router.navigate('iniciar-sesion')\n        }) // Si el cambio es exitoso, se redirige al inicio de sesión\n        .catch(error => {\n          switch (error.status) {\n            case 400:\n              this.alertService.showMessage(MESSAGES.recoveryDifferentPasswords)\n              this.user.password = ''\n              this.user.confirmPassword = ''\n              break\n            case 500:\n              this.alertService.showMessage(MESSAGES.serverError)\n              break\n            default:\n              this.alertService.showMessage(MESSAGES.unknownError)\n          }\n        })\n    } else {\n      this.alertService.showMessage(MESSAGES.recoveryDifferentPasswords)\n      this.user.password = ''\n      this.user.confirmPassword = ''\n    }\n  }\n}\n","import { Router } from 'aurelia-router'\n\nimport { MESSAGES } from 'config/config'\nimport { UserSignIn } from 'models/models'\nimport { Alert, Auth } from 'services/services'\n\n/**\n * Signin (module)\n * Módulo para el registro de estudiantes\n * @export\n * @class Signin\n */\nexport class Signin {\n  /**\n   * Método que realiza inyección de las dependencias necesarias en el módulo.\n   * Estas dependencias son cargadas bajo el patrón de diseño singleton.\n   * @static\n   * @returns Array con las dependencias a inyectar: Servicio de notificaciones (Alert),\n   * Servicio de Autenticación (Auth), Enrutamiento (Router)\n   */\n  static inject () {\n    return [Alert, Auth, Router]\n  }\n  /**\n   * Crea una instancia de Signin.\n   * @param {service} alertService - Servicio de notificaciones y mensajes\n   * @param {service} authService - Servicio de autenticación y registro\n   * @param {service} router - Servicio de enrutamiento\n   */\n  constructor (alertService, authorizationService, router) {\n    this.alertService = alertService\n    this.authorizationService = authorizationService\n    this.router = router\n    this.user = new UserSignIn()\n    this.user.type = 0\n  }\n\n  /**\n   * Envia al servidor los datos del nuevo usuario a registrar.\n   */\n  signin () {\n    if (this.user.isValid()) {\n      if (this.user.password === this.user.confirmPassword) {\n        this.authorizationService.registerStudent(this.user)\n          .then(() => {\n            this.alertService.showMessage(MESSAGES.signInCorrect)\n            this.router.navigate('iniciar-sesion')\n          }) // Si el registro es correcto se redirige al inicio de sesión\n          .catch((error) => {\n            switch (error.status) {\n              case 400:\n                this.alertService.showMessage(MESSAGES.signInWrongData)\n                break\n              case 401:\n                this.alertService.showMessage(MESSAGES.permissionsError)\n                break\n              case 500:\n                this.alertService.showMessage(MESSAGES.serverError)\n                break\n              default:\n                this.alertService.showMessage(MESSAGES.unknownError)\n            }\n          })\n      } else { // Si las contraseñas no coinciden, ambas se reinician para ingresarlas de nuevo\n        this.alertService.showMessage(MESSAGES.signInDifferentPasswords)\n        this.user.password = ''\n        this.user.confirmPassword = ''\n      }\n    } else {\n      this.alertService.showMessage(MESSAGES.signInIncompleteData)\n    }\n  }\n}\n","import * as nprogress from 'nprogress'\nimport {bindable, noView, decorators} from 'aurelia-framework'\n\nexport let LoadingIndicator = decorators(\n  noView(['nprogress/nprogress.css']),\n  bindable({name: 'loading', defaultValue: false})\n).on(class {\n  loadingChanged (newValue) {\n    if (newValue) {\n      nprogress.start()\n    } else {\n      nprogress.done()\n    }\n  }\n})\n"],"sourceRoot":"../src"}